NC_007356.1_NC_013552.1 <- c(87.75, 86.5, 90.09, 82.71, 92.93, 93.62, 87.59, 85.96, 87.56, 88.52, 86.12, 88.07, 84.65, 92.68, 91.38, 90.76, 85.99, 84.55, 88.44, 87.11, 84.2, 85.67, 86.15, 88.2, 86.76, 90.17, 84.12, 85.0, 92.1, 88.76, 89.0, 90.0, 91.0, 92.0, 95.0, 86.79, 87.83, 84.52, 90.98, 90.7, 78.66, 86.58, 93.22, 88.88, 93.16, 87.78, 95.75, 86.34, 90.71, 86.84, 89.35, 89.62, 94.21, 91.81, 89.52, 88.77, 90.37, 86.01, 86.23, 93.03, 88.93, 94.98, 83.45, 88.8, 82.25, 97.27, 85.27, 85.4, 83.33, 85.92, 91.09, 84.04, 96.45, 93.05, 87.01, 85.9, 92.79, 88.35, 88.28, 86.88, 87.08, 88.48, 89.44, 87.04, 91.06, 84.92, 82.68, 84.81, 84.36, 86.91, 90.74, 85.03, 89.47, 86.09, 88.03, 86.59, 94.84, 86.39, 82.33, 91.66, 83.19, 85.26, 94.03, 86.46, 84.06, 80.97, 89.02, 86.62, 89.15, 98.57, 86.49, 85.05, 90.25, 87.16, 83.61, 93.96, 86.17, 87.54, 82.49, 90.57, 83.26, 89.88, 89.26, 88.57, 87.13, 90.51, 83.29, 79.1, 94.25, 91.16, 87.85, 89.72, 84.28, 86.07, 85.3, 85.35, 91.53, 86.19, 87.63, 88.1, 86.71, 92.31, 89.27, 86.87, 83
.63, 89.4, 89.43, 83.1, 94.74, 89.34, 88.14, 91.18, 87.86, 83.83, 86.42, 95.36, 90.39, 84.66, 84.95, 97.22, 88.73, 91.51, 84.22, 88.82, 92.85, 83.32, 96.98, 89.93, 87.9, 84.59, 94.7, 90.12, 84.79, 84.76, 89.97, 84.53, 88.5, 87.09, 86.0, 83.8, 88.0, 82.03, 82.88, 89.69, 92.56, 91.79, 85.52, 93.93, 87.12, 91.63, 82.62, 81.65, 89.68, 87.3, 87.39, 91.1, 86.99, 89.55, 84.83, 88.08, 81.31, 82.64, 83.47, 89.2, 90.78, 91.03, 89.07, 86.27, 94.3, 90.86, 89.23, 89.66, 87.79, 81.22, 82.15, 91.39, 88.3, 93.07, 90.03, 86.22, 85.74, 88.78, 92.75, 78.46, 87.67, 94.49, 94.58, 86.66, 86.11, 91.15, 88.81, 86.64, 85.77, 88.27, 85.93, 85.28, 84.08, 79.94, 91.24, 88.06, 83.92, 86.67, 85.46, 88.36, 94.67, 89.74, 88.33, 86.92, 96.81, 84.45, 86.89, 85.45, 86.13, 84.01, 91.55, 88.4, 81.32, 81.35, 85.11, 91.88, 89.48, 87.68, 82.44, 88.04, 83.31, 91.01, 91.23, 87.92, 87.91, 86.47, 87.22, 95.47, 83.59, 98.63, 89.04, 91.46, 87.6, 90.02, 89.42, 91.62, 94.15, 86.48, 81.97, 87.94, 87.49, 90.05, 88.61, 88.58, 86.21, 82.34, 91.14, 81.7, 91.6
5, 90.45, 92.26, 89.89, 94.04, 86.8, 85.57, 81.6, 91.57, 84.13, 88.96, 93.73, 87.33, 84.29, 84.24, 85.97, 82.79, 80.9, 87.61, 88.16, 90.72, 83.41, 88.32, 89.28, 90.22, 85.82, 92.16, 87.98, 83.78, 83.71, 86.56, 98.27, 91.87, 88.02, 86.4, 90.43, 85.22, 82.95, 87.23, 81.75, 84.9, 90.3, 88.86, 87.41, 88.83, 87.42, 83.39, 85.95, 86.05, 91.33, 93.12, 84.51, 89.82, 85.85, 87.69, 90.56, 96.53, 81.98, 94.94, 92.54, 92.24, 79.88, 95.17, 83.86, 90.93, 88.9, 90.91, 90.38, 88.41, 92.61, 89.85, 86.97, 85.53, 92.13, 89.5, 86.04, 87.5, 87.36, 84.98, 85.81, 81.67, 87.96, 85.56, 90.42, 86.52, 88.12, 84.7, 82.65, 86.68, 83.88, 86.81, 86.55, 86.35, 89.11, 85.08, 83.67, 87.64, 84.87, 86.2, 83.4, 82.74, 88.98, 89.81, 90.27, 84.47, 90.07, 81.43, 94.23, 84.8, 91.19, 96.79, 87.88, 93.75, 81.19, 85.78, 84.18, 89.78, 84.23, 89.75, 88.34, 86.96, 87.29, 88.21, 83.13, 93.81, 86.77, 85.43, 96.37, 85.79, 90.9, 86.93, 82.6, 88.84, 88.24, 82.8, 89.36, 93.33, 91.92, 91.69, 88.01, 85.48, 86.45, 83.72, 85.01, 96.21, 93.67, 90.32, 90.35, 84.88,
90.48, 87.47, 95.44, 90.08, 89.24, 89.91, 86.6, 84.57, 94.78, 84.07, 88.91, 91.47, 89.08, 85.75, 92.23, 88.92, 92.59, 87.72, 86.36, 88.46, 91.96, 86.06, 87.02, 86.82, 89.96, 93.91, 95.18, 88.49, 88.95, 85.61, 85.58, 92.17, 89.3, 86.7, 85.83, 93.26, 86.57, 90.6, 95.96, 90.73, 83.69, 89.29, 91.67, 94.6, 89.53, 91.34, 85.02, 91.26, 89.16, 91.72, 92.71, 90.28, 81.76, 86.25, 84.84, 84.41, 80.54, 86.14, 83.05, 84.71, 97.85, 87.27, 84.78, 87.4, 87.43, 93.53, 88.74, 91.3, 89.86, 89.33, 89.83, 84.42, 86.94, 88.39, 90.95, 89.61, 84.56, 85.51, 84.54, 85.37, 82.82, 86.85, 89.06, 90.44, 89.38, 86.98, 83.94, 89.54, 95.8, 84.43, 91.56, 89.22, 93.02, 83.18, 85.41, 87.95, 87.97, 90.53, 90.5, 85.39, 92.41, 84.03, 90.29, 86.63, 82.83, 87.35, 83.52, 85.12, 83.65, 80.99, 87.18, 87.55, 83.11, 85.32, 86.08, 93.09, 88.15, 93.63, 88.43, 82.32, 87.2, 89.39, 86.3, 81.64, 87.07, 95.1, 85.63, 83.23, 88.19, 81.82, 86.65, 90.2, 87.14, 85.66, 88.22, 86.78, 88.62, 86.75, 85.34, 83.28, 85.23, 92.03, 85.87, 79.33, 87.52, 82.81, 87.77, 89.37
, 88.99, 83.93, 86.43, 84.4, 87.21, 85.8, 91.8, 83.87, 89.84, 90.36, 88.64, 86.33, 96.92, 85.55, 88.89, 91.48, 87.45, 90.01, 87.51, 89.01, 91.05, 91.32, 91.35, 84.72, 85.88, 87.48, 87.84, 84.44, 90.04, 78.93, 82.16, 92.78, 93.61, 87.87, 93.84, 88.47, 79.03, 89.59, 91.28, 90.69, 89.92, 89.46, 87.06, 84.21, 85.62, 87.1, 92.15, 88.18, 94.44, 89.67, 86.16, 82.85, 89.49, 95.45, 88.71, 91.6, 82.61, 94.19, 86.53, 85.17, 87.25, 85.14, 88.26, 91.7, 85.73, 90.26, 97.01, 79.46, 85.98, 83.57, 83.6, 87.46, 90.13, 87.73, 87.65, 92.69, 86.29, 83.14, 93.25, 87.24, 90.16, 83.73, 88.72, 85.91, 87.28, 85.19, 91.25, 85.84, 89.17, 84.93, 82.9, 95.24, 86.61, 85.71, 87.31, 87.53, 84.27, 89.87, 96.4, 96.43, 92.34, 84.05, 90.85, 88.13, 92.8, 86.86, 88.56, 94.53, 86.83, 85.42, 83.22, 89.19, 82.78, 89.12, 86.51, 86.9, 84.74, 87.82, 83.85, 88.79, 89.41, 91.98, 86.1, 84.94, 86.54, 88.05, 82.76, 88.97, 88.42, 95.53)
hist(NC_007356.1_NC_013552.1)
mean(NC_007356.1_NC_013552.1)
median(NC_007356.1_NC_013552.1)
min(NC_007356.1_NC_013552.1)
max(NC_007356.1_NC_013552.1)
length(NC_007356.1_NC_013552.1)
NC_013552.1_NC_002936.3 <- c(81.75, 91.5, 87.5, 94.09, 95.97, 93.37, 97.7, 89.96, 91.56, 89.54, 90.37, 98.12, 88.07, 96.65, 96.68, 97.38, 88.26, 91.44, 86.98, 85.99, 83.67, 96.55, 87.11, 95.73, 80.13, 95.08, 89.67, 91.22, 97.19, 86.71, 96.2, 85.45, 78.55, 89.37, 83.0, 85.0, 88.1, 95.51, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 94.79, 98.0, 87.83, 96.05, 84.74, 87.67, 94.66, 97.58, 97.22, 83.78, 95.99, 86.34, 85.64, 98.63, 87.32, 84.28, 94.21, 78.77, 84.77, 94.37, 96.07, 92.9, 92.93, 90.24, 84.8, 94.96, 91.52, 88.14, 91.33, 89.92, 89.11, 89.89, 87.91, 88.45, 96.43, 93.3, 89.55, 87.01, 95.65, 93.35, 88.32, 84.35, 86.88, 88.48, 82.94, 93.44, 91.04, 97.03, 91.67, 81.21, 95.14, 92.56, 84.36, 86.25, 94.91, 79.69, 93.47, 84.89, 82.59, 81.44, 94.39, 86.91, 82.66, 96.79, 85.48, 86.31, 92.28, 86.46, 92.06, 92.89, 89.02, 90.62, 93.15, 89.18, 89.72, 95.69, 96.74, 94.49, 97.05, 90.25, 95.61, 91.58, 90.17, 91.79, 95.91, 88.7, 97.64, 94.55, 85.42, 90.88, 80.57, 92.6, 91.13, 92.26, 99.03, 91.29, 85.8, 88.65, 92.36,
83.16, 91.16, 87.29, 93.72, 88.28, 96.25, 91.55, 81.42, 87.24, 94.31, 92.1, 98.71, 92.31, 80.75, 98.87, 85.4, 81.43, 89.5, 86.41, 89.34, 97.3, 85.93, 90.21, 85.05, 91.86, 95.83, 86.42, 90.86, 95.41, 93.8, 91.4, 92.95, 94.22, 88.73, 94.63, 83.51, 92.63, 79.71, 92.85, 94.17, 87.38, 95.46, 93.94, 87.9, 91.61, 94.87, 91.59, 87.37, 93.36, 92.14, 90.76, 80.83, 93.97, 83.98, 96.53, 96.5, 95.09, 86.27, 92.73, 89.42, 95.02, 91.53, 89.44, 89.95, 84.56, 85.52, 87.12, 82.35, 94.41, 90.99, 89.05, 92.62, 92.11, 99.29, 82.23, 87.76, 96.56, 87.88, 94.78, 94.64, 97.0, 90.78, 96.73, 91.76, 82.11, 99.24, 93.07, 97.1, 95.63, 92.75, 81.24, 95.9, 84.65, 91.39, 90.03, 95.66, 84.69, 98.22, 91.98, 92.78, 87.47, 92.35, 82.4, 93.33, 93.91, 91.15, 79.21, 96.75, 91.37, 98.52, 96.23, 89.9, 93.93, 95.24, 87.23, 91.72, 84.67, 96.36, 89.74, 84.33, 98.92, 92.67, 90.89, 89.45, 86.4, 86.93, 96.01, 90.05, 94.88, 85.35, 91.88, 80.53, 81.48, 93.68, 86.85, 98.44, 94.35, 83.31, 90.49, 85.66, 91.01, 87.92, 91.91, 92.22, 95.47, 83.59, 90.4, 89.14, 8
9.48, 80.61, 95.84, 91.46, 89.06, 84.53, 86.67, 87.62, 82.15, 86.18, 91.49, 96.06, 98.05, 96.61, 92.58, 87.17, 87.14, 83.08, 91.25, 81.7, 88.16, 90.15, 86.03, 96.26, 85.57, 85.6, 81.73, 96.13, 86.21, 89.73, 86.69, 82.73, 91.3, 88.33, 96.08, 99.54, 87.36, 85.02, 92.16, 90.08, 86.5, 94.72, 82.57, 85.28, 90.22, 95.25, 86.07, 82.05, 87.98, 97.87, 91.71, 95.57, 85.31, 98.3, 82.27, 83.87, 94.4, 86.43, 85.22, 96.48, 95.74, 85.46, 94.3, 91.7, 88.61, 92.86, 80.71, 92.83, 95.42, 87.39, 97.36, 99.25, 93.95, 86.05, 84.51, 80.76, 97.89, 94.8, 93.42, 81.82, 85.85, 95.94, 89.98, 90.94, 91.19, 98.48, 88.94, 88.63, 89.41, 95.7, 84.41, 84.39, 86.6, 98.21, 89.53, 97.5, 92.09, 95.75, 85.81, 86.44, 97.56, 88.12, 95.45, 90.65, 90.68, 84.71, 97.06, 97.97, 90.84, 91.99, 93.46, 83.62, 90.55, 99.7, 97.11, 95.67, 92.37, 87.64, 87.03, 98.2, 85.83, 88.76, 95.78, 95.77, 89.29, 91.27, 94.1, 97.73, 84.63, 90.23, 95.19, 84.79, 88.71, 98.93, 86.79, 92.66, 95.03, 83.68, 89.3, 96.1, 81.78, 91.03, 92.34, 79.72, 90.46, 91.8, 95.29, 95.49, 96.21
, 93.81, 90.2, 90.77, 84.37, 90.04, 94.9, 90.93, 92.71, 88.84, 98.95, 80.24, 91.62, 86.8, 80.31, 89.36, 83.92, 91.69, 95.89, 84.92, 96.67, 90.45, 83.72, 85.01, 90.71, 93.67, 92.52, 86.32, 90.35, 87.13, 92.88, 84.09, 90.48, 94.27, 95.44, 88.08, 89.91, 96.15, 96.78, 92.91, 84.31, 90.28, 91.47, 83.83, 93.6, 95.5, 92.01, 88.92, 92.59, 99.13, 84.68, 97.67, 96.24, 85.16, 88.46, 81.29, 98.06, 81.39, 91.02, 88.62, 87.15, 87.18, 88.57, 95.64, 96.49, 92.45, 87.86, 94.28, 97.61, 89.58, 96.17, 86.3, 92.92, 96.58, 83.5, 88.68, 97.26, 93.45, 94.57, 97.43, 93.13, 86.73, 87.69, 93.29, 94.42, 92.57, 95.59, 84.19, 85.24, 93.16, 88.17, 87.72, 92.94, 83.93, 98.28, 82.25, 96.84, 96.71, 97.85, 98.31, 89.64, 87.82, 88.87, 83.4, 91.43, 83.44, 88.78, 86.51, 97.35, 92.74, 95.3, 81.61, 92.17, 93.86, 97.83, 88.42, 96.39, 94.95, 89.61, 93.51, 85.37, 90.14, 94.82, 90.85, 95.81, 90.98, 91.32, 91.94, 97.54, 95.8, 89.43, 97.53, 96.72, 93.24, 97.41, 87.97, 87.73, 86.53, 80.62, 94.5, 85.09, 85.39, 82.49, 88.54, 96.52, 94.14, 89.63, 91.05, 88
.96, 97.29, 86.35, 79.74, 83.52, 86.13, 91.65, 87.44, 94.73, 95.56, 91.42, 96.99, 97.02, 97.24, 85.15, 87.07, 98.08, 93.64, 96.64, 84.62, 87.2, 90.39, 96.7, 98.14, 95.07, 95.1, 95.05, 85.63, 83.74, 88.36, 88.19, 85.79, 85.71, 88.34, 93.4, 92.49, 91.95, 91.18, 81.66, 95.95, 86.78, 93.61, 85.34, 95.36, 86.06, 92.03, 85.87, 90.83, 97.21, 90.81, 94.81, 90.67, 94.24, 87.93, 96.27, 90.96, 89.24, 87.8, 86.36, 98.33, 96.92, 88.89, 95.23, 87.45, 98.01, 94.08, 89.01, 89.23, 95.32, 91.35, 90.69, 93.88, 85.59, 98.81, 88.44, 86.04, 83.36, 82.16, 90.91, 97.86, 87.87, 84.47, 83.03, 96.62, 84.27, 84.26, 94.94, 86.77, 94.06, 88.72, 89.46, 97.62, 87.35, 97.47, 88.18, 94.44, 92.13, 97.49, 96.11, 95.2, 79.51, 90.58, 97.17, 93.14, 98.32, 83.7, 91.23, 94.26, 97.31, 80.93, 97.01, 97.23, 94.48, 99.57, 94.13, 83.73, 87.65, 96.69, 98.29, 89.21, 96.96, 94.74, 88.8, 90.16, 92.72, 97.55, 83.25, 93.84, 89.17, 94.99, 89.7, 88.24, 89.71, 91.31, 87.78, 88.27, 89.87, 92.4, 84.43, 84.05, 97.09, 78.88, 85.78, 85.41, 86.86, 97.57, 84.42, 86.83
, 97.42, 89.04, 97.39, 92.12, 93.17, 90.51, 86.9, 87.99, 91.82, 87.85, 98.16, 94.38, 95.98, 96.94, 86.54, 81.03, 88.05, 94.85, 95.12, 89.78, 89.8, 90.41, 91.51, 91.73, 88.97)
mean(NC_013552.1_NC_002936.3)
median(NC_013552.1_NC_002936.3)
hist(NC_013552.1_NC_002936.3)
length(NC_013552.1_NC_002936.3)
help(commandArgs)
62*1350
help("Pearson")
??pearson
read.tree
library("data.table")#
library("adephylo")#
library("ape")
read.tree
scan
hclust()
dist()
help(vegan)
??vegan
version()
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					print(first)#
					print(second)#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					print(first)#
					print(second)#
					print(H.int)#
					print(H.ext)#
					print(Na.int)#
					print(Na.ext)#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					print(H.int)#
					print(H.ext)#
					print(Na.int)#
					print(Na.ext)#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					print("H.int")#
					print(H.int)#
					print("H.ext")#
					print(H.ext)#
					print("Na.int")#
					print(Na.int)#
					print("Na.ext")#
					print(Na.ext)#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					print("H.ext/H.int")#
					print(H.ext/H.int)#
					print("Na.ext/Na.int")#
					print(Na.ext/Na.int)#
				}#
			}#
		}#
	}#
}
8.8/0.1235955
2.368421/0.4382022
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							print((Na.ext/Na.int)/(H.ext/H.int))#
						}#
					}#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
results_vector = vector()#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							results_vector[length(results_vector)+1]#
						}#
					}#
				}#
			}#
		}#
	}#
}
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
results_vector = vector()#
#
for(i in 1:10)#
{#
	H.int <- i#
	for(j in 1:10)#
	{#
		H.ext <-j#
		for(k in 1:10)#
		{#
			Na.int <- k#
			for(l in 1:10)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							results_vector[length(results_vector)+1]#
						}#
					}#
				}#
			}#
		}#
	}#
}
results_vector
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
results_vector = vector()#
#
for(i in 1:50)#
{#
	H.int <- i#
	for(j in 1:50)#
	{#
		H.ext <-j#
		for(k in 1:50)#
		{#
			Na.int <- k#
			for(l in 1:50)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							results_vector[length(results_vector)+1]#
						}#
					}#
				}#
			}#
		}#
	}#
}
results_vector
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
results_vector = vector()#
#
for(i in 1:50)#
{#
	H.int <- i#
	for(j in 1:50)#
	{#
		H.ext <-j#
		for(k in 1:50)#
		{#
			Na.int <- k#
			for(l in 1:50)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							results_vector[length(results_vector)+1] = (Na.ext/Na.int)/(H.ext/H.int)#
						}#
					}#
				}#
			}#
		}#
	}#
}
results_vector
hist(results_vector)
P.Na = 1E-8#
P.H = 1E-10#
#
H.int = 1#
H.ext = 1#
Na.int = 1#
Na.ext = 1#
#
results_vector = vector()#
#
for(i in 1:100)#
{#
	H.int <- i#
	for(j in 1:100)#
	{#
		H.ext <-j#
		for(k in 1:100)#
		{#
			Na.int <- k#
			for(l in 1:100)#
			{#
				Na.ext <- l#
				first <- P.Na * Na.int#
				second <- (H.ext*P.Na*Na.ext + P.H*H.ext^2)/H.int - P.H*H.int#
				if(first == second)#
				{#
					if(H.ext/H.int != 1)#
					{#
						if(Na.ext/Na.int != 1)#
						{#
							results_vector[length(results_vector)+1] = (Na.ext/Na.int)/(H.ext/H.int)#
						}#
					}#
				}#
			}#
		}#
	}#
}
results_vector
hist(results_vector)
hist(results_vector, n=100)
plot(results_vector)
plot(results_vector, ylim=c(0,1))
plot(results_vector, ylim=c(0,100))
plot(results_vector, ylim=c(0,1000))
plot(results_vector, ylim=c(0,100))
plot(results_vector, ylim=c(0,10))
300000/(3.14*3^2)
0.2*(240/3)
16/100
100/16
48*3-1.5
66*3-1.5
69*3-1.5
19*3-1.5
500/60
8*20
160/24
.05*1.76
97*0.9
147*0.9
140*0.9
180*0.9
160*0.9
150*0.9
87/3
132/3
28.4-2
26.4/3.3
28.4-6.6
21.8+3.4
83/3
27*3.3
47/3.3
14*3.3
46.2-3.3
17*3.3
65/3.3
20*3.3
7*3.3
(4.6+36.9)/2
(48.5+36.9)/2
(48.5+74)/2
(83+74)/2
66/3.3
9.9+3.3
(5+27)/2
mean(c(27,58))
mean(c(58,77))
9*3.3
15*3.3
49.5+3.3
89.1/3.3
42.9-3.3
66-3.3
5*13000+20*3500
270000/1E18
(0.1*2.7E-13)/1E6
(1E5*2.7E-20)/1E-4
(1E15*2.7E-20)/1E-4
15*12
285,737*2
285737*2
sample(c('A', 'B', 'C', 'D'), 10, replace=T)
45*.37
62*0.37
21*.37
49*.37
64*.37
14*.37
38*.37
41*.37
8*.37
22*.37
24*0.37
6 * 0.37
13*.37
16*0.37
70*0.37
23*0.37
18*0.37
15.17 + 4*0.37
10^8 * 10^4 * 85 * 4 * 10^4 * 10^6
3.4e+24 * 2E-17
2.5/5.5
0.45 * 275000000
500*650*(6.022E23/6.022E14)
(30000*1E9)/(3.25E14)
setwd("~/Documents/Bo_review/sodium_atp_figure/")
organising c subunit ion table data#
subunit_ion_table <- read.table("subunit_ion_table", header=TRUE, row.names=1)#
#
rownames(subunit_ion_table) <- c("PM5","PM159","PM50","PM70","PM30","PM91")#
#
ordered_subunit_ion_table <- subunit_ion_table[c("PM159","PM91","PM70","PM50","PM30","PM5"),]#
#
prop_table = matrix(0, ncol = 6, nrow = 3)#
#
for(i in 1:6)#
{#
	total_c_subunits = ordered_subunit_ion_table[i,1] + ordered_subunit_ion_table[i,2] + ordered_subunit_ion_table[i,3]#
	prop_table[,i] = c(ordered_subunit_ion_table[i,1]/total_c_subunits,ordered_subunit_ion_table[i,2]/total_c_subunits,ordered_subunit_ion_table[i,3]/total_c_subunits)#
}#
#organising BLAST data#
blast_table <- read.table("real_PM_c_subunits_vs_NR.tdt", stringsAsFactors = FALSE)#
#
name_vector = vector()#
#
for(i in 1: dim(blast_table)[1])#
{#
	name_vector[i] = strsplit(blast_table[i,1],"_")[[1]][1]#
}#
#
blast_table[,dim(blast_table)[2]+1] = name_vector#
#
blast_averages = vector()#
#
PM_mean_identities = vector()#
PM_mean_bitscores = vector()#
PM_sd_identities = vector()#
PM_sd_bitscores = vector()#
#
#PM5#
PM5_identities = vector()#
PM5_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "R1qual32.paired")#
	{#
		PM5_identities[length(PM5_identities)+1] <- blast_table[i,3]#
		PM5_bitscores[length(PM5_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[1] <- mean(PM5_identities)#
PM_mean_bitscores[1] <- mean(PM5_bitscores)#
PM_sd_identities[1] <- sd(PM5_identities)#
PM_sd_bitscores[1] <- sd(PM5_bitscores)#
#PM30#
PM30_identities = vector()#
PM30_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "PM30")#
	{#
		PM30_identities[length(PM30_identities)+1] <- blast_table[i,3]#
		PM30_bitscores[length(PM30_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[2] <- mean(PM30_identities)#
PM_mean_bitscores[2] <- mean(PM30_bitscores)#
PM_sd_identities[2] <- sd(PM30_identities)#
PM_sd_bitscores[2] <- sd(PM30_bitscores)#
#PM50#
PM50_identities = vector()#
PM50_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "PM50")#
	{#
		PM50_identities[length(PM50_identities)+1] <- blast_table[i,3]#
		PM50_bitscores[length(PM50_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[3] <- mean(PM50_identities)#
PM_mean_bitscores[3] <- mean(PM50_bitscores)#
PM_sd_identities[3] <- sd(PM50_identities)#
PM_sd_bitscores[3] <- sd(PM50_bitscores)#
#PM70#
PM70_identities = vector()#
PM70_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "PM70")#
	{#
		PM70_identities[length(PM70_identities)+1] <- blast_table[i,3]#
		PM70_bitscores[length(PM70_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[4] <- mean(PM70_identities)#
PM_mean_bitscores[4] <- mean(PM70_bitscores)#
PM_sd_identities[4] <- sd(PM70_identities)#
PM_sd_bitscores[4] <- sd(PM70_bitscores)#
#PM91#
PM91_identities = vector()#
PM91_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "PM91")#
	{#
		PM91_identities[length(PM91_identities)+1] <- blast_table[i,3]#
		PM91_bitscores[length(PM91_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[5] <- mean(PM91_identities)#
PM_mean_bitscores[5] <- mean(PM91_bitscores)#
PM_sd_identities[5] <- sd(PM91_identities)#
PM_sd_bitscores[5] <- sd(PM91_bitscores)#
#PM159#
PM159_identities = vector()#
PM159_bitscores = vector()#
#
for(i in 1:dim(blast_table)[1])#
{#
	if(blast_table[i,13] == "PM159")#
	{#
		PM159_identities[length(PM159_identities)+1] <- blast_table[i,3]#
		PM159_bitscores[length(PM159_bitscores)+1] <- blast_table[i,12]#
	}#
}#
#
PM_mean_identities[6] <- mean(PM159_identities)#
PM_mean_bitscores[6] <- mean(PM159_bitscores)#
PM_sd_identities[6] <- sd(PM159_identities)#
PM_sd_bitscores[6] <- sd(PM159_bitscores)#
#Plotting the data#
par(mfrow=c(1,2))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110))#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}
pdf("MT_ATP_synthase.pdf", width=10, height=4)#
#Plotting the data#
par(mfrow=c(1,2))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110))#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110))#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(0.5,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110))#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(0.5,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110), xlab="Fraction of ATP synthase c subunit coverage")#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(1,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table))#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110), xlab="Fraction of ATP synthase c subunit coverage")#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(1,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table), xlab="Fraction of ATP synthase c subunit coverage")#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110))#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(1,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table), xlab="Fraction of ATP synthase c subunit coverage")#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110), xlab="BLAST NR top hit mean % identity")#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5.5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(1,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table), xlab="Fraction of ATP synthase c subunit coverage")#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110), xlab="BLAST NR top hit mean % identity")#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
pdf("MT_ATP_synthase.pdf", width=10, height=5.5)#
#Plotting the data#
par(mfrow=c(1,2), mai=c(1,0.5,0.5,0.5))#
barplot(prop_table, horiz=TRUE, names.arg = row.names(ordered_subunit_ion_table), xlab="Fraction of ATP synthase c subunit coverage")#
barplot(rev(PM_mean_identities),horiz=TRUE,xlim=c(0,110), xlab="BLAST NR top hit mean % aa identity")#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(7.9-1.2*i,7.9-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])-rev(PM_sd_identities[i]),rev(PM_mean_identities[i])-rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
for(i in 1:length(PM_sd_identities))#
{#
	lines(c(rev(PM_mean_identities[i])+rev(PM_sd_identities[i]),rev(PM_mean_identities[i])+rev(PM_sd_identities[i])),c(8-1.2*i,7.8-1.2*i))#
}#
dev.off()
